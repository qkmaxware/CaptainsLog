<SlideDrawer @ref=drawer OnClose=@(() => DataProvider?.Save())>
    <TabView @ref=tabs>
        <Tab Title="Current Mission">
            @if (ReferenceEquals(brief, null)) {
                <div class="w3-center">
                    <img src="ui/wifi.svg" class="w3-margin-bottom" style="width: 128px; max-width: 100%;"><br>
                    <button class="w3-button w3-round-xlarge lcars-primary" @onclick=generate>Contact HQ for Mission</button>
                </div>
            } else {
                <div class="w3-animate-zoom">
                    <div class="briefing">
                    <h4 class="w3-center">@brief.Type</h4>
                    
                    <p class="w3-center">@brief.IncitingIncident</p>
                    
                    <h5>May Include:</h5>
                    <div>
                        <ol class="w3-ol">
                            @foreach (var str in brief.Categories ?? Enumerable.Empty<string>()) {
                                <li>@str</li>
                            }
                        </ol>  
                    </div>

                    <h5>Details:</h5>
                    <div class="w3-container w3-margin-bottom">
                        @foreach (var adv in brief.Advantages ?? Enumerable.Empty<Advantage>()) {
                            <div class="advantage">
                                <strong>ADVANTAGE: @adv.Name</strong>
                                <p>@(string.IsNullOrEmpty(adv.Description) ? "No details provided" : adv.Description)</p>
                            </div>
                        }
                        @foreach (var comp in brief.Complications ?? Enumerable.Empty<Complication>()) {
                            <div class="complication">
                                <strong>COMPLICATION: @comp.Name</strong>
                                <p>@(string.IsNullOrEmpty(comp.Description) ? "No details provided" : comp.Description)</p>
                            </div>
                        }
                    </div>
                    </div>

                    <TitleBlock Title="Progress Report">
                        <MissionTracker Brief=@brief></MissionTracker>
                        <div class="w3-row w3-margin-top">
                            <div class="w3-col s6">
                                <button class="w3-button w3-round-xlarge lcars-warning" @onclick=abandon>Abandon Mission</button>
                            </div>
                            <div class="w3-col s6" style="text-align: right;">
                                <button class="w3-button w3-round-xlarge lcars-secondary" @onclick=complete>Complete Mission</button>
                            </div>
                        </div>
                    </TitleBlock>

                </div>
            }
        </Tab>
        <Tab Title="Completed">
            @if (!ReferenceEquals(data, null) && !ReferenceEquals(data.Missions, null) && !ReferenceEquals(data.Missions.Completed, null)) { 
                <ul class="w3-ul">
                @foreach (var item in ((IEnumerable<MissionBriefing>)data.Missions.Completed).Reverse()) {
                    <li class="w3-row">
                        <div class="w3-col w3-xxlarge" style="width: 2em;">
                            @item.Progress.Grade()
                        </div>
                        <div class="w3-rest">
                            <strong>@(item.Type):</strong> @item.IncitingIncident<br>
                            <div class="scene-status">
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene1></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene2></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene3></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene4></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene5></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene6></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene7></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene8></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene9></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene10></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene11></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene12></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene13></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene14></MissionTrackerDelta></div>
                                <div class="scene-div"><MissionTrackerDelta State=@item.Progress.Scene15></MissionTrackerDelta></div>
                            </div>
                            <div style="text-align: right;">
                                completed: @item.Completed
                            </div>
                        </div>
                    </li>
                }
                </ul>
            }
        </Tab>
    </TabView>
    <div style="height: 64px;"></div>
</SlideDrawer>

@code {
    [Parameter] public IAppDataProvider? DataProvider {get; set;}
    private SlideDrawer? drawer;
    private TabView? tabs;

    private AppData? data;
    private MissionBriefing? brief;

    public void Show() {
        brief = null;
        data = DataProvider?.GetAppData();
        if (!ReferenceEquals(data, null)) {
            if (ReferenceEquals(data.Missions, null)) {
                data.Missions = new CaptainsLog.Missions();
            }
            brief = data.Missions.Current;
        }
        StateHasChanged();
        drawer?.Show();
    }

    private static MissionBriefingGenerator generator = new MissionBriefingGenerator();
    private void generate() {
        this.brief = generator.Generate();
        var data = DataProvider?.GetAppData();
        if (!ReferenceEquals(data, null)) {
            if (ReferenceEquals(data.Missions, null)) {
                data.Missions = new CaptainsLog.Missions();
            }
            data.Missions.Current = brief;
        }
    }

    private void abandon() {
        this.brief = null;
        var data = DataProvider?.GetAppData();
        if (!ReferenceEquals(data, null)) {
            if (ReferenceEquals(data.Missions, null)) {
                data.Missions = new CaptainsLog.Missions();
            }
            data.Missions.Current = null;
        }
    }

    private void complete() {
        if (ReferenceEquals(brief, null))
            return;

        this.brief.Completed = DateTime.Now;
        var data = DataProvider?.GetAppData();
        if (!ReferenceEquals(data, null)) {
            if (ReferenceEquals(data.Missions, null)) {
                data.Missions = new CaptainsLog.Missions();
            }
            if (ReferenceEquals(data.Missions.Completed, null)){
                data.Missions.Completed = new List<MissionBriefing>();
            }
            data.Missions.Completed.Add(this.brief);
            tabs?.Select(1); // Goto completed missions
        }
        this.brief = null;
        if (!ReferenceEquals(data, null)) {
            if (ReferenceEquals(data.Missions, null)) {
                data.Missions = new CaptainsLog.Missions();
            }
            data.Missions.Current = null;
        }
    }
}