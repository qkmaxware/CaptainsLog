@inject IJSRuntime js

<SlideDrawer @ref=appSettings OnClose=@(() => DataProvider?.Save())>
    <TabView>
        <Tab Title="Application">
            <TitleBlock Title="Data">
                <button class="w3-button w3-round-xlarge w3-margin-top lcars-primary wide" @onclick=DownloadAppDataJson>Export</button>
                <label class="w3-button w3-round-xlarge w3-margin-top w3-margin-bottom lcars-secondary wide">
                    Import
                    <InputFile style="display:none;" OnChange=UploadAppDataJson type=".json" />
                </label><br>

                <details>
                    <summary>Import From Previous Versions</summary>
                    <div class="w3-border w3-container w3-center">
                        <label class="w3-button w3-round-xlarge w3-margin-top w3-margin-bottom lcars-secondary">
                        Import From Version 1.0
                        <InputFile style="display:none;" OnChange=UploadAppDataJsonV1 type=".json" />
                    </label>
                    </div>
                </details>


                <div style="text-align: right;">
                    <button class="w3-button w3-round-xlarge w3-margin-top lcars-warning" @onclick=Delete>Delete</button>
                </div>
            </TitleBlock>
        </Tab>
        <Tab Title="Other">
            <div class="w3-padding w3-margin-bottom">
                <a target="_blank" href="https://github.com/qkmaxware/CaptainsLog/wiki" class="w3-button w3-round-xlarge lcars-primary wide">Online Help</a>
                <a target="_blank" href="https://github.com/qkmaxware/CaptainsLog/wiki/Data-Privacy" class="w3-button w3-round-xlarge w3-margin-top lcars-primary wide">Privacy Notice</a>
                <a target="_blank" href="https://github.com/qkmaxware/CaptainsLog/issues" class="w3-button w3-round-xlarge w3-margin-top lcars-primary wide">Submit an Issue</a>
            </div>
            <TitleBlock Title="Copyright">
                This fan site is intended for personal and non-profit use only and is not sponsored, sanctioned, or affiliated with CBS Studios Inc., Paramount Pictures, Modiphius Entertainment, or the STAR TREK franchise. No copyright infringement is intended through the display of content on this site. Any copyrighted material is included under "fair use" principles. The Star TrekÂ® franchise and related logos are owned by and are a registered trademark of Paramount Pictures & CBS Studios Inc. All Rights Reserved by their respective owners.
            </TitleBlock>
        </Tab>
    </TabView>
</SlideDrawer>

@code {

    [Parameter] public IAppDataProvider? DataProvider {get; set;}
    private SlideDrawer? appSettings;
    public void Open() => appSettings?.Show();

    System.Text.Json.JsonSerializerOptions jsonOptions = new System.Text.Json.JsonSerializerOptions{
        IncludeFields = true,
        WriteIndented = true,
    };

    private async Task UploadAppDataJson(InputFileChangeEventArgs e) {
        try {
            foreach (var path in e.GetMultipleFiles(1)) {
                using MemoryStream ms = new MemoryStream();
                await path.OpenReadStream(maxAllowedSize: 512000 * 4).CopyToAsync(ms);
                ms.Position = 0;

                using var reader = new StreamReader(ms);
                var contents = reader.ReadToEnd();
                var loaded = System.Text.Json.JsonSerializer.Deserialize<AppData>(contents, jsonOptions);
                if (ReferenceEquals(loaded, null))
                    return;
                this.DataProvider?.LoadAppData(loaded);
            }
            StateHasChanged();
        } catch (Exception ex) {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    } 

    private async Task UploadAppDataJsonV1(InputFileChangeEventArgs e) {
        try {
            foreach (var path in e.GetMultipleFiles(1)) {
                using MemoryStream ms = new MemoryStream();
                await path.OpenReadStream(maxAllowedSize: 512000 * 4).CopyToAsync(ms);
                ms.Position = 0;

                using var reader = new StreamReader(ms);
                var contents = reader.ReadToEnd();
                var loaded = System.Text.Json.JsonSerializer.Deserialize<Fleet>(contents, jsonOptions);
                if (ReferenceEquals(loaded, null))
                    return;
                this.DataProvider?.LoadAppData(new AppData {
                    Fleet = loaded
                });
            }
            StateHasChanged();
        } catch (Exception ex) {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    } 

    private async Task DownloadAppDataJson() {
        var data = this.DataProvider?.GetAppData();
        var contents = System.Text.Json.JsonSerializer.Serialize(data, jsonOptions);
        
        using var stream = new MemoryStream();
        using var writer = new StreamWriter(stream);
        writer.Write(contents);
        writer.Flush();
        stream.Position = 0;

        var fileName = "Captain's Log.json";

        using var streamRef = new DotNetStreamReference(stream: stream);

        await js.InvokeVoidAsync("App.DownloadFileFromStream", fileName, streamRef);
    }

    private async Task Delete() {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "This action cannot be undone. Are you sure you want to delete all application data?"); 
        if (confirmed) {
            this.DataProvider?.LoadAppData(new AppData());
        }
    }
}